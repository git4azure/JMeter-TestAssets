# This is a basic workflow to help you get started with Actions

name: 'github workflow/actions demo'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  #pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  JMETER_VERSION: 5.3
  TEST_GQL_JMX_FILE: NewLook-GQL.jmx
  TEST_GQL_PROP_FILE: NewLook_GQL.properties
  TEST_SFP_JMX_FILE: NewLook-SF.jmx
  TEST_SFP_PROP_FILE: NewLook_SFP.properties
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      #- name: check perf myaccount on cicd
      #  run: |
      #    curl -o /dev/null -s -w '%{time_namelookup}:%{time_connect}:%{time_starttransfer}:%{time_total}' https://my-account-fe-cicd-dsf-uks-as.azurewebsites.net/uk/my-account/?testapi=success 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- name: Checkout
      #  uses: actions/checkout@v2
      ##- name: doSomething
      ##  uses: ./
      ##  id: hello
      ##  with:
      ##    who-to-greet: 'PerfTester'
      ## Use the output from the `hello` step
      - name: get specific run_number
        run: |
          runNum=${{github.run_number}}
          if [ runNum == 1 ]; then 
             crunNum = 1
          else
             crunNum=`expr $runNum - 1`
          fi
          echo "cRunNum=${crunNum}" >> $GITHUB_ENV
      #- uses: actions/setup-java@v2
      #  with:
      #    distribution: 'adopt'
      #    java-version: '11'
      - name: Checkout JMeter-TestAssets
        uses: actions/checkout@v2
        with: 
          repository: git4azure/JMeter-TestAssets
          #path: JMeter-TestAssets
      - name: run JMeter test
        run: |
         # cat jmeter-binaries/apache-jmeter-* |tar -zxvf - >/dev/null 2>&1 
         # dateSuffix=`date +%Y%m%d%H%M%S`
         # jtlFilename=`basename scripts/${{env.TEST_GQL_JMX_FILE}} .jmx`-${dateSuffix}.jtl
         # echo "*******************************************"
         # apache-jmeter-${{env.JMETER_VERSION}}/bin/jmeter -v
         # apache-jmeter-${{env.JMETER_VERSION}}/bin/jmeter -n -t scripts/${{env.TEST_GQL_JMX_FILE}} -q properties/${{env.TEST_GQL_PROP_FILE}} -l ${jtlFilename} -j jmeter-gql.log -e -o res-gql-${{github.run_number}} 
         # dateSuffix=`date +%Y%m%d%H%M%S`
         # jtlFilename=`basename scripts/${{env.TEST_SFP_JMX_FILE}} .jmx`-${dateSuffix}.jtl
         # apache-jmeter-${{env.JMETER_VERSION}}/bin/jmeter -n -t scripts/${{env.TEST_SFP_JMX_FILE}} -q properties/${{env.TEST_SFP_PROP_FILE}} -l ${jtlFilename} -j jmeter-sfp.log -e -o res-sfp-${{github.run_number}} 
          #apache-jmeter-${{env.JMETER_VERSION}}/bin/jmeter -n -t scripts/${{env.TEST_JMX_FILE}} -q properties/${{env.TEST_PROP_FILE}} -l ${jtlFilename} -j jmeter.log -e -o res-${{github.run_number}}
          #if [ -d "res-${{github.run_number}}" ]; then
          #    echo "found result folder"
          #    echo "resFolder=res-${{github.run_number}}" >> $GITHUB_ENV
          #else
          #    echo "no result folder was found"
          #fi
        #working-directory: JMeter-TestAssets

      - name: check workspace
        run: |
           headline="+++++++++++++++++++ test github env +++++++++++++\r"
           result=`awk '{print "test\t10\ntest2\t20"}' properties/NewLook_SFP.properties`
           #echo "result"+$result
           C_RES=${headline}+${result}
           echo "***********************************"
           echo $C_RES
           echo "***********************************"
           echo "C_RES<<EOF" >> $GITHUB_ENV
           echo "${C_RES}" >> $GITHUB_ENV
           echo "EOF" >> $GITHUB_ENV
           echo "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"
           #echo "env.C_RES"+${{env.C_RES}}
      - name: display C_RES
        run: |
          echo "String in env:: ${{env.C_RES}}"
     # - name: Download workflow artifact
     #   continue-on-error: true
     #   id: download
     #   uses: dawidd6/action-download-artifact@v2.14.0
     #   with:
     #     workflow: main.yml
     #     name: jmeter-log-stat
     #     run_number: ${{env.cRunNum}}

     # - name: Try to download the result of last success run
     #   if: ${{ steps.download.outcome=='failure' }}
     #   continue-on-error: true
     #   id: downloadAgain
     #   uses: dawidd6/action-download-artifact@v2.14.0
     #   with:
     #     workflow: main.yml
     #     name: jmeter-log-stat
     # - name: compare the result
     #   run: |
     #     echo "***********************GraghQL Comparison ${{env.cRunNum}} vs. ${{github.run_number}}*********************************************************"
     #     if [ -f "res-gql-${{env.cRunNum}}/statistics.json" ]; then
     #         awk -f JMeter-TestAssets/scripts/processJMeterResStat.awk res-gql-${{env.cRunNum}}/statistics.json JMeter-TestAssets/res-gql-${{github.run_number}}/statistics.json
     #     else
     #         echo "=============NOT result of previous run compare with the latest run itself: ${{github.run_number}}===================="
     #         awk -f JMeter-TestAssets/scripts/processJMeterResStat.awk JMeter-TestAssets/res-gql-${{github.run_number}}/statistics.json JMeter-TestAssets/res-gql-${{github.run_number}}/statistics.json
     #     fi
     #     echo "***********************Storefront Comparison ${{env.cRunNum}} vs. ${{github.run_number}}*******************************************************"
     #     if [ -f "res-sfp-${{env.cRunNum}}/statistics.json" ]; then
     #         awk -f JMeter-TestAssets/scripts/processJMeterResStat.awk res-sfp-${{env.cRunNum}}/statistics.json JMeter-TestAssets/res-sfp-${{github.run_number}}/statistics.json
     #     else
     #         echo "=============NOT result of previous run compare with the latest run itself: ${{github.run_number}}===================="
     #         awk -f JMeter-TestAssets/scripts/processJMeterResStat.awk JMeter-TestAssets/res-sfp-${{github.run_number}}/statistics.json JMeter-TestAssets/res-sfp-${{github.run_number}}/statistics.json
     #     fi
     # - name: upload JMeter result
     #   uses: actions/upload-artifact@v2
     #   with:
     #     name: jmeter-log-stat
     #     path: |
     #       JMeter-TestAssets/res-*-${{github.run_number}}/
     #       JMeter-TestAssets/*.jtl
     #       JMeter-TestAssets/jmeter-*.log
     # ##- name: Get the output time
      ##  run: echo "The time was ${{ steps.hello.outputs.time }}"
      #- name: Dump GitHub context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJSON(github) }}
      #  run: echo "$GITHUB_CONTEXT"
      #- name: Dump job context
      #  env:
      #    JOB_CONTEXT: ${{ toJSON(job) }}
      #  run: echo "$JOB_CONTEXT"
      #- name: Dump steps context
      #  env:
      #    STEPS_CONTEXT: ${{ toJSON(steps) }}
      #  run: echo "$STEPS_CONTEXT"
      #- name: Dump runner context
      #  env:
      #    RUNNER_CONTEXT: ${{ toJSON(runner) }}
      #  run: echo "$RUNNER_CONTEXT"
      #- name: Dump strategy context
      #  env:
      #    STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      #  run: echo "$STRATEGY_CONTEXT"
      #- name: Dump matrix context
      #  env:
      #    MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      #  run: echo "$MATRIX_CONTEXT"

    
