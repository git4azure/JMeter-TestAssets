<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="NewLook-GQL" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="REPORT_DIR_PATH" elementType="Argument">
            <stringProp name="Argument.name">REPORT_DIR_PATH</stringProp>
            <stringProp name="Argument.value">${__P(dataDirPath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUPTIME" elementType="Argument">
            <stringProp name="Argument.name">RAMPUPTIME</stringProp>
            <stringProp name="Argument.value">${__P(rampUp)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RUNS" elementType="Argument">
            <stringProp name="Argument.name">RUNS</stringProp>
            <stringProp name="Argument.value">${__P(runs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">user-agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept-language</stringProp>
            <stringProp name="Header.value">en-GB,en;q=0.9</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="newlookCookieConsent" elementType="Cookie" testname="newlookCookieConsent">
            <stringProp name="Cookie.value">true</stringProp>
            <stringProp name="Cookie.domain">${hostname}</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">true</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Initialisation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GY-MultiStoreSiteHelper" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.jmeter.threads.JMeterContext;
import org.apache.jmeter.threads.JMeterVariables;
import org.apache.jmeter.util.JMeterUtils;
import org.slf4j.LoggerFactory;

public class SiteHelper {

	private Set stores;
	private Map storesProps;
	private Map userJourneyThreads;
	private Map userJourneyThroughput;
	private String storeRegex = &quot;store\\.\\d+&quot;;
	final props=JMeterUtils.getJMeterProperties();
	final log=LoggerFactory.getLogger(getClass().getName());
	private boolean charsetChecked=false;
	public SiteHelper() {

		stores = new HashSet();
		storesProps = new HashMap();
		userJourneyThreads = new HashMap();
		userJourneyThroughput = new HashMap();
		
		// Get all stores from property file
		Pattern p = Pattern.compile(storeRegex);
		for (String propName: props.propertyNames()) {
			Matcher m = p.matcher(propName);
			if (m.find()) {
				String store = props.get(propName);
				stores.add(store);
				storesProps.put(store, new HashMap());
			}
		}
		
		// Get store dataDirPath first - need before creating salmon databean
		for (String store: stores) {
			String dataDirPath = props.getProperty(store + &quot;.dataDirPath&quot;);
			
			//Default to &apos;data/&apos; if not found
			//log.info(&quot;No dataDirPath found for store &quot; + store + &quot;. Defaulting to &apos;data/&apos;&quot;);
			dataDirPath = (dataDirPath == null) ? &quot;data/&quot; : dataDirPath;
			storesProps.get(store).put(&quot;dataDirPath&quot;, dataDirPath);
		}
		
		
		// Get store related properties from properties file
		for (String propName: props.propertyNames()) {
			for (String store: stores) {
				String storeDataDir = storesProps.get(store).get(&quot;dataDirPath&quot;);
				
				if (propName.startsWith(store + &quot;.&quot;)) {
					// Found store property
					String propValue = props.get(propName);
					propName = propName.replaceFirst(&quot;^&quot; + store + &quot;.&quot;, &quot;&quot;); //strip store prefix
					
					if (propName.startsWith(&quot;dataFile.&quot;)) {
						// Found datafile
						propName = propName.replaceFirst(&quot;^dataFile.&quot;, &quot;&quot;);
						dataFiles.get(store).put(propName,storeDataDir + &quot;/&quot; + propValue);
						if(! charsetChecked){
						    CharsetToolkit ctk = new CharsetToolkit(new File(storeDataDir + &quot;/&quot; + propValue));
						    props.put(&quot;guessedCharset&quot;, ctk.getDefaultCharset());
						    charsetChecked=true;
						}
						
					} else if (propName.startsWith(&quot;UJ-&quot;) &amp;&amp; propName.endsWith(&quot;.Threads&quot;) ) {
						// Found User Journey Threads
						String userJourney = propName.replaceFirst(/.Threads$/, &quot;&quot;);
						if (!userJourneyThreads.containsKey(userJourney)) {
							userJourneyThreads.put(userJourney, new HashMap());
						}
						userJourneyThreads.get(userJourney).put(store, propValue);
						
					} else if(propName.startsWith(&quot;UJ-&quot;) &amp;&amp; propName.endsWith(&quot;.Throughput&quot;) ){
						// Found User Journey Throughput
						String userJourney = propName.replaceFirst(/.Throughput$/, &quot;&quot;);
						if (!userJourneyThroughput.containsKey(userJourney)) {
							userJourneyThroughput.put(userJourney, new HashMap());
						}
						userJourneyThroughput.get(userJourney).put(store, propValue);
					
					}else {
						//Neither data file or user journey thread property
						storesProps.get(store).put(propName, propValue);
					}
				}
			}
		}
	}

	public void setStoreVariables(JMeterContext threadContext) {
		setStoreVariables(threadContext, threadContext.getVariables().get(&quot;store&quot;));
	}

	public void setStoreVariables(JMeterContext threadContext, String store) {
		/*
		 * Adds all properties in &apos;storesProps&apos; for the specified store 
		 * to the JMeterVariables of the passed in thread context.
		 */
		if (!storesProps.containsKey(store)) {
			log.error(&quot;Store doesn&apos;t exist.  Unable to set store properties&quot;);
			throw new Exception(); //Ensures error falls through to calling beanshell.
			return;
		}
		Map propsMap = (Map) storesProps.get(store);		
		JMeterVariables threadVariables = threadContext.getVariables();
		for (String propName: propsMap.keySet()) {
			threadVariables.put(propName, propsMap.get(propName));
		}
		threadVariables.put(&quot;store&quot;, store);
	}

	public void setPacing(JMeterContext threadContext) {
		setPacing(threadContext, threadContext.getVariables().get(&quot;store&quot;));
	}
	
	public void setPacing (JMeterContext threadContext, String store) {
		String threadName = threadContext.getThreadGroup().getName();
		JMeterVariables threadVariables = threadContext.getVariables();
		String pacing = threadVariables.get(threadName + &quot;.Pacing&quot;);

		// Default to 10000 ms
		//log.info(&quot;No pacing for store &quot; + store + &quot; user journey &quot; + threadName + &quot;. Defaulting to 10000&quot;);
		pacing = (pacing == null) ? &quot;10000&quot; : pacing;		
		threadVariables.put(&quot;pacing&quot;, pacing);
	}

	public String getStoreProperty(String store, String propName) {
		String storeProp = null;
		if (storesProps.containsKey(store)) {
			storeProp = storesProps.get(store).get(propName);
		}
		return storeProp;
	}

	public Map getUserJourneyThreadsMap() {
		return userJourneyThreads;
	}

	public Map getUserJourneyThroughputMap(){
	    return userJourneyThroughput;
	}

	public String getDataFilePath(JMeterContext threadContext, String dataFileName){
		String filePath=dataFiles.get(threadContext.getVariables().get(&quot;store&quot;)).get(dataFileName);
	     return filePath;
	}
}

props.put(&quot;SiteHelper&quot;, new SiteHelper());
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GY-MultiStoreUserJourneyHelper" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.threads.JMeterContext;
import org.apache.jmeter.util.JMeterUtils;
import org.slf4j.LoggerFactory;

public class UserJourneyHelper {

	private Map userJourneys;
	private Map userJourneysThroughput;
	private Map userJourneysThreadStartOrder;
	final props=JMeterUtils.getJMeterProperties();
	final log=LoggerFactory.getLogger(getClass().getName());

	public UserJourneyHelper() {
		
		userJourneys = (props.get(&quot;SiteHelper&quot;)).getUserJourneyThreadsMap();
		userJourneysThroughput = (props.get(&quot;SiteHelper&quot;)).getUserJourneyThroughputMap();
		userJourneysThreadStartOrder = new HashMap();

		//For each user journey need to determine total number of threads
		//across all stores and the order threads will start
		for (String userJourney: userJourneys.keySet()) {
			int totalThreads = 0;
			List startThreadOrder = new ArrayList();
			
			Map userJourneyMap = (Map) userJourneys.get(userJourney);
			for (String store: userJourneyMap.keySet()) {
				int storeThreads;
				try {
					storeThreads = Integer.parseInt(userJourneyMap.get(store));
					if (storeThreads&lt;0) 
						throw new NumberFormatException();
				} catch (NumberFormatException e) {
					log.error(&quot;Invalid value for number of threads: &quot; + userJourneyMap.get(store));
					IsSuccess = false;
					return;
				}
				totalThreads += storeThreads;
				for(int i=0;i&lt;storeThreads;i++) {
					startThreadOrder.add(store);
				}
			}
			props.put(userJourney + &quot;.Threads&quot;, Integer.toString(totalThreads));

			//Suffle list to introduce randomness to order stores start
			Collections.shuffle(startThreadOrder);
			userJourneysThreadStartOrder.put(userJourney, startThreadOrder);
		}
	}

	public void setThreadStore(JMeterContext threadContext) {
		threadContext.getVariables().put(&quot;store&quot;, getThreadStore(threadContext));
	}

	public String getThreadStore(JMeterContext threadContext) {
		/*
		 * Determines store for the thread based on the thread
		 * group name/number of thread context passed in
		 */
		String threadName = threadContext.getThreadGroup().getName();
		int threadNum = threadContext.getThreadNum();
		if (!userJourneysThreadStartOrder.containsKey(threadName)) {
			log.error(&quot;Thread name &apos;&quot; + threadName + &quot;&apos; not found in thread start order map&quot;);
			throw new Exception(); //Ensures error falls through to calling beanshell
			return null;
		}
		return userJourneysThreadStartOrder.get(threadName).get(threadNum);
	}
}

props.put(&quot;UserJourneyHelper&quot;, new UserJourneyHelper());</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UJ-GQL-GetComponentById" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${RUNS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(UJ-GQL-GetComponentById.Threads,0)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUPTIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX-GQL-GetComponentById" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ-GQL-GetComponentById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;componentAnyOf&quot;, &quot;variables&quot;:{&quot;baseSiteId&quot;:&quot;uk-site&quot;,&quot;componentId&quot;:&quot;FooterComponent&quot;}, &quot;query&quot;:&quot;query componentAnyOf($baseSiteId: String!, $componentId: String!){componentAnyOf(baseSiteId: $baseSiteId, componentId: $componentId)}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UJ-GQL-GetProductById" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${RUNS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(UJ-GQL-GetProductById.Threads,0)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUPTIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX-GQL-GetProductById" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ-GQL-GetProductById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;product&quot;,&quot;variables&quot;:{&quot;baseSiteId&quot;:&quot;uk-site&quot;,&quot;productCode&quot;:&quot;3620420&quot;},&quot;query&quot;:&quot;fragment stockFragment on Stock {\n  stockLevel\n  stockLevelStatus\n}\n\nfragment priceFragment on Price {\n  currency {\n    isoCode\n    symbol\n  }\n  value\n  formattedValue\n}\n\nfragment productFragment on Product {\n  code\n  description\n  gallery\n  name\n  stock {\n    ...stockFragment\n  }\n  price {\n    ...priceFragment\n  }\n  purchasable\n  description\n  name\n  url\n}\n\nquery product($baseSiteId: String!, $productCode: String!) {\n  product(baseSiteId: $baseSiteId, code: $productCode) {\n    ...productFragment\n    variants {\n      ...productFragment\n    }\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UJ-GQL-CMSPages" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${RUNS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(UJ-GQL-CMSPages.Threads,0)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUPTIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX-GQL-CMSPages" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ-GQL-CMSPages" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;cMSPage&quot;,&quot;variables&quot;:{&quot;baseSiteId&quot;:&quot;uk-site&quot;,&quot;code&quot;:&quot;3620420&quot;,&quot;pageReference&quot;:&quot;productGrid&quot;,&quot;pageType&quot;:&quot;PRODUCTPAGE&quot;},&quot;query&quot;:&quot;fragment cmsContentSlotFragment on CMSContentSlot {\n  components\n  name\n  position\n  typeCode\n  uid\n  uuid\n}\n\nfragment linkComponentFragment on CMSLinkComponent {\n  categoryCode\n  contentPage\n  isExternal\n  linkName\n  name\n  productCode\n  trackerCode\n  typeCode\n  uid\n  url\n  uuid\n  visible\n}\n\nquery cMSPage($baseSiteId: String!, $code: String!, $pageReference: String!, $pageType: PageType!) {\n  cMSPage(baseSiteId: $baseSiteId, code: $code, pageReference: $pageReference, pageType: $pageType) {\n    catalogVersionUuid\n    contentSlots {\n      ...cmsContentSlotFragment\n    }\n    defaultPage\n    label\n    linkComponents {\n      ...linkComponentFragment\n    }\n    name\n    navigationNodes\n    pageLabel\n    template\n    title\n    typeCode\n    uid\n    uuid\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UJ-GQL-GetCMSPageByID" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${RUNS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(UJ-GQL-GetCMSPageByID.Threads,0)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUPTIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX-GQL-GetCMSPageByID" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ-GQL-GetCMSPageByID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetCMSPageById&quot;,&quot;variables&quot;:{&quot;baseSiteId&quot;:&quot;uk-site&quot;,&quot;pageId&quot;:&quot;3620420&quot;},&quot;query&quot;:&quot;fragment cmsContentSlotFragment on CMSContentSlot {\n  components\n  name\n  position\n  typeCode\n  uid\n  uuid\n}\n\nfragment linkComponentFragment on CMSLinkComponent {\n  categoryCode\n  contentPage\n  isExternal\n  linkName\n  name\n  productCode\n  trackerCode\n  typeCode\n  uid\n  url\n  uuid\n  visible\n}\n\nquery GetCMSPageById($baseSiteId: String!, $pageId: String!) {\n  getCMSPageByID(baseSiteId: $baseSiteId, pageId: $pageId) {\n    catalogVersionUuid\n    contentSlots {\n      ...cmsContentSlotFragment\n    }\n    defaultPage\n    label\n    linkComponents {\n      ...linkComponentFragment\n    }\n    name\n    navigationNodes\n    pageLabel\n    template\n    title\n    typeCode\n    uid\n    uuid\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${REPORT_DIR_PATH}/summary-report-${__time(yyyyMMddHHmmss)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
